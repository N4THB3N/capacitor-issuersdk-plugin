{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAa5C,MAAM,OAAO,qBACX,SAAQ,SAAS;IAGjB,IAAI;QACF,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,WAAW;QACT,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,SAAS;QACP,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,aAAa,CAAC,MAAsB;QAClC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,QAAQ,CAAC,MAAmB;QAC1B,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,mBAAmB,CACjB,MAAiC;QAEjC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,kCAAkC,CAChC,MAAiC;QAEjC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  IContainsToken,\n  IGooglePayToken,\n  IProvisionByEncryptedCard,\n  IProvisionByPushReceiptId,\n  IProvisioningResult,\n  ITokenizeGP,\n  IssuerGooglePay,\n  IssuerGpApi,\n} from './definitions';\n\nexport class CapacitorIssuerSdkWeb\n  extends WebPlugin\n  implements IssuerGooglePay\n{\n  init(): Promise<IssuerGpApi<any>> {\n    throw new Error('Method not implemented.');\n  }\n  isAvailable(): Promise<IssuerGpApi<boolean>> {\n    throw new Error('Method not implemented.');\n  }\n  getTokens(): Promise<IssuerGpApi<IGooglePayToken>> {\n    throw new Error('Method not implemented.');\n  }\n  containsToken(params: IContainsToken): Promise<IssuerGpApi<boolean>> {\n    console.log(params);\n    throw new Error('Method not implemented.');\n  }\n  tokenize(params: ITokenizeGP): Promise<IssuerGpApi<IProvisioningResult>> {\n    console.log(params);\n    throw new Error('Method not implemented.');\n  }\n  executeProvisioning(\n    params: IProvisionByPushReceiptId,\n  ): Promise<IssuerGpApi<IProvisioningResult>> {\n    console.log(params);\n    throw new Error('Method not implemented.');\n  }\n  executeProvisioningOfEncryptedCard(\n    params: IProvisionByEncryptedCard,\n  ): Promise<IssuerGpApi<IProvisioningResult>> {\n    console.log(params);\n    throw new Error('Method not implemented.');\n  }\n}\n"]}